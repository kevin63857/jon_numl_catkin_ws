// Generated by gencpp from file myo_raw/MyoArm.msg
// DO NOT EDIT!


#ifndef MYO_RAW_MESSAGE_MYOARM_H
#define MYO_RAW_MESSAGE_MYOARM_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace myo_raw
{
template <class ContainerAllocator>
struct MyoArm_
{
  typedef MyoArm_<ContainerAllocator> Type;

  MyoArm_()
    : arm(0)
    , xdir(0)  {
    }
  MyoArm_(const ContainerAllocator& _alloc)
    : arm(0)
    , xdir(0)  {
  (void)_alloc;
    }



   typedef int32_t _arm_type;
  _arm_type arm;

   typedef int32_t _xdir_type;
  _xdir_type xdir;


    enum { ARM_UNKNOWN = 0 };
     enum { ARM_RIGHT = 1 };
     enum { ARM_LEFT = 2 };
     enum { XDIR_UNKNOWN = 0 };
     enum { XDIR_TOWARD_WRIST = 1 };
     enum { XDIR_TOWARD_ELBOW = 2 };
 

  typedef boost::shared_ptr< ::myo_raw::MyoArm_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::myo_raw::MyoArm_<ContainerAllocator> const> ConstPtr;

}; // struct MyoArm_

typedef ::myo_raw::MyoArm_<std::allocator<void> > MyoArm;

typedef boost::shared_ptr< ::myo_raw::MyoArm > MyoArmPtr;
typedef boost::shared_ptr< ::myo_raw::MyoArm const> MyoArmConstPtr;

// constants requiring out of line definition

   

   

   

   

   

   



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::myo_raw::MyoArm_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::myo_raw::MyoArm_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace myo_raw

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': True, 'IsMessage': True, 'HasHeader': False}
// {'geometry_msgs': ['/opt/ros/indigo/share/geometry_msgs/cmake/../msg'], 'std_msgs': ['/opt/ros/indigo/share/std_msgs/cmake/../msg'], 'myo_raw': ['/home/hoenir/numl_catkin_ws/src/myo_raw/msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::myo_raw::MyoArm_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::myo_raw::MyoArm_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::myo_raw::MyoArm_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::myo_raw::MyoArm_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::myo_raw::MyoArm_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::myo_raw::MyoArm_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::myo_raw::MyoArm_<ContainerAllocator> >
{
  static const char* value()
  {
    return "ef98f3b0198c2ce3840df4d4d22e916b";
  }

  static const char* value(const ::myo_raw::MyoArm_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xef98f3b0198c2ce3ULL;
  static const uint64_t static_value2 = 0x840df4d4d22e916bULL;
};

template<class ContainerAllocator>
struct DataType< ::myo_raw::MyoArm_<ContainerAllocator> >
{
  static const char* value()
  {
    return "myo_raw/MyoArm";
  }

  static const char* value(const ::myo_raw::MyoArm_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::myo_raw::MyoArm_<ContainerAllocator> >
{
  static const char* value()
  {
    return "## A MyoArm message can be used to determine the last known\n\
## arm the myo was determined to be on (only sent for API version 1+)\n\
\n\
int32 ARM_UNKNOWN = 0\n\
int32 ARM_RIGHT = 1\n\
int32 ARM_LEFT = 2\n\
\n\
int32 XDIR_UNKNOWN = 0\n\
int32 XDIR_TOWARD_WRIST = 1\n\
int32 XDIR_TOWARD_ELBOW = 2\n\
\n\
\n\
# Which arm is the myo currently on\n\
int32 arm\n\
\n\
# What is the determined x direction (is is the light up or down)\n\
# In other words is the light pointing up or down?\n\
int32 xdir\n\
";
  }

  static const char* value(const ::myo_raw::MyoArm_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::myo_raw::MyoArm_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.arm);
      stream.next(m.xdir);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct MyoArm_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::myo_raw::MyoArm_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::myo_raw::MyoArm_<ContainerAllocator>& v)
  {
    s << indent << "arm: ";
    Printer<int32_t>::stream(s, indent + "  ", v.arm);
    s << indent << "xdir: ";
    Printer<int32_t>::stream(s, indent + "  ", v.xdir);
  }
};

} // namespace message_operations
} // namespace ros

#endif // MYO_RAW_MESSAGE_MYOARM_H
