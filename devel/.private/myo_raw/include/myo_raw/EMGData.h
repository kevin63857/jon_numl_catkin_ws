// Generated by gencpp from file myo_raw/EMGData.msg
// DO NOT EDIT!


#ifndef MYO_RAW_MESSAGE_EMGDATA_H
#define MYO_RAW_MESSAGE_EMGDATA_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace myo_raw
{
template <class ContainerAllocator>
struct EMGData_
{
  typedef EMGData_<ContainerAllocator> Type;

  EMGData_()
    : emg_data()
    , moving(false)  {
      emg_data.assign(0);
  }
  EMGData_(const ContainerAllocator& _alloc)
    : emg_data()
    , moving(false)  {
  (void)_alloc;
      emg_data.assign(0);
  }



   typedef boost::array<uint32_t, 8>  _emg_data_type;
  _emg_data_type emg_data;

   typedef uint8_t _moving_type;
  _moving_type moving;




  typedef boost::shared_ptr< ::myo_raw::EMGData_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::myo_raw::EMGData_<ContainerAllocator> const> ConstPtr;

}; // struct EMGData_

typedef ::myo_raw::EMGData_<std::allocator<void> > EMGData;

typedef boost::shared_ptr< ::myo_raw::EMGData > EMGDataPtr;
typedef boost::shared_ptr< ::myo_raw::EMGData const> EMGDataConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::myo_raw::EMGData_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::myo_raw::EMGData_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace myo_raw

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': True, 'IsMessage': True, 'HasHeader': False}
// {'geometry_msgs': ['/opt/ros/indigo/share/geometry_msgs/cmake/../msg'], 'std_msgs': ['/opt/ros/indigo/share/std_msgs/cmake/../msg'], 'myo_raw': ['/home/hoenir/numl_catkin_ws/src/myo_raw/msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::myo_raw::EMGData_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::myo_raw::EMGData_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::myo_raw::EMGData_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::myo_raw::EMGData_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::myo_raw::EMGData_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::myo_raw::EMGData_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::myo_raw::EMGData_<ContainerAllocator> >
{
  static const char* value()
  {
    return "cacb00d78b8d8a4ba46dcd469cd1cda3";
  }

  static const char* value(const ::myo_raw::EMGData_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xcacb00d78b8d8a4bULL;
  static const uint64_t static_value2 = 0xa46dcd469cd1cda3ULL;
};

template<class ContainerAllocator>
struct DataType< ::myo_raw::EMGData_<ContainerAllocator> >
{
  static const char* value()
  {
    return "myo_raw/EMGData";
  }

  static const char* value(const ::myo_raw::EMGData_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::myo_raw::EMGData_<ContainerAllocator> >
{
  static const char* value()
  {
    return "# Provides access to the raw emg data off the sensor\n\
# Useful to try and write your own classifier\n\
\n\
\n\
# The raw sensor reading off of each of the 8 emg sensors\n\
# note this reading is dependent on the rotation of the sensor\n\
# on the arm\n\
uint32[8] emg_data\n\
\n\
# Was the sensor moving during this reading\n\
bool     moving\n\
";
  }

  static const char* value(const ::myo_raw::EMGData_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::myo_raw::EMGData_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.emg_data);
      stream.next(m.moving);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct EMGData_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::myo_raw::EMGData_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::myo_raw::EMGData_<ContainerAllocator>& v)
  {
    s << indent << "emg_data[]" << std::endl;
    for (size_t i = 0; i < v.emg_data.size(); ++i)
    {
      s << indent << "  emg_data[" << i << "]: ";
      Printer<uint32_t>::stream(s, indent + "  ", v.emg_data[i]);
    }
    s << indent << "moving: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.moving);
  }
};

} // namespace message_operations
} // namespace ros

#endif // MYO_RAW_MESSAGE_EMGDATA_H
