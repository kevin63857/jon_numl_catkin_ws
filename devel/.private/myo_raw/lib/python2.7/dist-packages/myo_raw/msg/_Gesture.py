# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from myo_raw/Gesture.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct


class Gesture(genpy.Message):
  _md5sum = "61762cbfd8d8bfa53ae334cb6f8d76a3"
  _type = "myo_raw/Gesture"
  _has_header = False #flag to mark the presence of a Header object
  _full_text = """## A Gesture message can be used in place of the built in EMGData message
## The gestures can either be trained using the myo_raw myo_classifier
## of builtins (for api version 1+)

# What a pose means if it's a builtin
int32 POSE_REST = 0
int32 POSE_FIST = 1
int32 POSE_WAVE_IN = 2
int32 POSE_WAVE_OUT = 3
int32 POSE_FINGERS_SPREAD = 4
int32 POSE_THUMB_TO_PINKY = 5
int32 POSE_UNKNOWN = 255

# Was the pose a builtin from the myo api and not a manually trained one
bool 	is_builtin

# Either the trained pose number or one of the built-ins
# note the default classifier only can have a pose number from 0 to 9
int32   pose_number

# How confident was the built in classifier that this pose was accurate
# will be 0 if the pose was a builtin
float64 confidence
"""
  # Pseudo-constants
  POSE_REST = 0
  POSE_FIST = 1
  POSE_WAVE_IN = 2
  POSE_WAVE_OUT = 3
  POSE_FINGERS_SPREAD = 4
  POSE_THUMB_TO_PINKY = 5
  POSE_UNKNOWN = 255

  __slots__ = ['is_builtin','pose_number','confidence']
  _slot_types = ['bool','int32','float64']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       is_builtin,pose_number,confidence

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(Gesture, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.is_builtin is None:
        self.is_builtin = False
      if self.pose_number is None:
        self.pose_number = 0
      if self.confidence is None:
        self.confidence = 0.
    else:
      self.is_builtin = False
      self.pose_number = 0
      self.confidence = 0.

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_struct_Bid.pack(_x.is_builtin, _x.pose_number, _x.confidence))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      end = 0
      _x = self
      start = end
      end += 13
      (_x.is_builtin, _x.pose_number, _x.confidence,) = _struct_Bid.unpack(str[start:end])
      self.is_builtin = bool(self.is_builtin)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_struct_Bid.pack(_x.is_builtin, _x.pose_number, _x.confidence))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      end = 0
      _x = self
      start = end
      end += 13
      (_x.is_builtin, _x.pose_number, _x.confidence,) = _struct_Bid.unpack(str[start:end])
      self.is_builtin = bool(self.is_builtin)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
_struct_Bid = struct.Struct("<Bid")
